let x = [1,2,3] in [x,x,x]

generating code...

define [3 x [3 x i32]*]* @f() {
entry:
  %0 = alloca [3 x i32]
  %1 = getelementptr inbounds i32, [3 x i32]* %0, i32 0
  store i32 1, i32* %1
  %2 = getelementptr inbounds i32, [3 x i32]* %0, i32 1
  store i32 2, i32* %2
  %3 = getelementptr inbounds i32, [3 x i32]* %0, i32 2
  store i32 3, i32* %3
  %4 = alloca [3 x [3 x i32]*]
  %5 = getelementptr inbounds [3 x i32]*, [3 x [3 x i32]*]* %4, i32 0
  store [3 x i32]* %0, [3 x i32]** %5
  %6 = getelementptr inbounds [3 x i32]*, [3 x [3 x i32]*]* %4, i32 1
  store [3 x i32]* %0, [3 x i32]** %6
  %7 = getelementptr inbounds [3 x i32]*, [3 x [3 x i32]*]* %4, i32 2
  store [3 x i32]* %0, [3 x i32]** %7
  ret [3 x [3 x i32]*]* %4
}

generating optimised code...

define [3 x [3 x i32]*]* @f() {
entry:
  %0 = alloca [3 x i32], align 4
  %1 = getelementptr inbounds i32, [3 x i32]* %0, i64 0
  store i32 1, i32* %1, align 4
  %2 = getelementptr inbounds i32, [3 x i32]* %0, i64 1
  store i32 2, i32* %2, align 4
  %3 = getelementptr inbounds i32, [3 x i32]* %0, i64 2
  store i32 3, i32* %3, align 4
  %4 = alloca [3 x [3 x i32]*], align 8
  %5 = getelementptr inbounds [3 x i32]*, [3 x [3 x i32]*]* %4, i64 0
  store [3 x i32]* %0, [3 x i32]** %5, align 8
  %6 = getelementptr inbounds [3 x i32]*, [3 x [3 x i32]*]* %4, i64 1
  store [3 x i32]* %0, [3 x i32]** %6, align 8
  %7 = getelementptr inbounds [3 x i32]*, [3 x [3 x i32]*]* %4, i64 2
  store [3 x i32]* %0, [3 x i32]** %7, align 8
  ret [3 x [3 x i32]*]* %4
}

running...
-> 0